function [] = SaveCurveToDatFile(curve, datFilepath, imageFilepath, CalibrationData, IntegrationParams, shouldUseInverseNM)

if (~exist('shouldUseInverseNM', 'var'))
    shouldUseInverseNM = true;
end

f = fopen(datFilepath, 'w');
if (f > 0)
    [~, ~, versionText] = GetVersion();

    [imageFileFolder, imageFileName, imageFileExt] = fileparts(imageFilepath);
    fprintf(f, '# Image file: "%s", From folder: "%s"\n', [imageFileName imageFileExt], imageFileFolder);
    fprintf(f, '# This file was generated by %s Timestamp: %s\n', versionText, datestr(clock));
    fprintf(f, '# \n');
    
    fileInfo = dir(imageFilepath);
    fprintf(f, '# Image file timestamp: %s\n', datestr(fileInfo.datenum));
    fprintf(f, '# Total intensity: %d \n', 0);
    fprintf(f, '# Maximal intensity: %d \n', 0);
    fprintf(f, '# \n');
    fprintf(f, '# Calibration info: \n');
    fprintf(f, '# Sample to detector distance = %g mm \n', CalibrationData.SampleToDetDist);
    fprintf(f, '# Alpha = %g (Radians) \n', CalibrationData.AlphaRadians);
    fprintf(f, '# Beta = %g (Radians) \n', CalibrationData.BetaRadians);
    fprintf(f, '# Wavelength = %g (Angstrom) \n', CalibrationData.Lambda);
    fprintf(f, '# Beam center X = %g (Pixels) \n', CalibrationData.BeamCenterX);
    fprintf(f, '# Beam center Y = %g (Pixels) \n', CalibrationData.BeamCenterY);
    fprintf(f, '# Pixel size = %g (mm) \n', CalibrationData.PixelSize);
    fprintf(f, '# Q min/max/bin-count = %g/%g/%d (A^-1/A^-1/#) \n', ...
        IntegrationParams.QMin, IntegrationParams.QMax, IntegrationParams.QStepsCount);
    dezingerType = {'None', 'trimmed mean', 'Poisson-median rejection filter'};
    fprintf(f, '# Dezinger type: %s \n', dezingerType{IntegrationParams.DezingerType + 1});
    if (IntegrationParams.DezingerType > 0)
        fprintf(f, '# Dezinger percentile: %g \n', IntegrationParams.DezingerPercentile);
    end
    fprintf(f, '# \n');
    
    try
        if (~shouldUseInverseNM)
            fprintf(f, '# Q Scale: A^-1\n');
            data = [curve.Q(:), curve.I(:), curve.IErr(:)];
        else
            fprintf(f, '# Q Scale: nm^-1\n');
            data = [curve.Q(:) * 10, curve.I(:), curve.IErr(:)];
        end
        
        for i = 1:size(data, 1)
            fprintf(f, '  %e   %e   %e\n', data(i, 1), data(i, 2), data(i, 3));
        end
    catch
    end
    fclose(f);
end

end
